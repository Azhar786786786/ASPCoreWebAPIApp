		How to use JWT Token in Web Api

1) first of all install Microsoft.AspNetCore.Authentication.JwtBearer in our project with the help of Nuget package manager

2) Add two namespace in program.cs file
	using Microsoft.AspNetCore.Authentication.JwtBearer;
	using Microsoft.IdentityModel.Tokens;

3) Add service container side in programs.cs file
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
        };

    });

4) Add Authentication method in Program.cs file
	app.UseAuthentication();

5) Add key and value in appsettings.json file
	"Jwt":{
	"Issuer":"https://connectedProgrammer.com",
	"Audience":"https://connectedProgrammer.com",
	"Key":"ABCDeujujsik@!!!Ashsnskajuh"
	}

6) Add Users class in models
	public class clsUsers
	{
		public string UserName{get;set;}
		public string Password{get;set;}
	}

7) Add LoginController in Controller section

	[Route("api/[controller]")]
	[ApiController]
	public class LoginController : ControllerBase
	{
    		public readonly IConfiguration _config;
    		public LoginController(IConfiguration configuration)
    		{
        		_config = configuration;
    		}

    		private clsUsers AuthenticateUser(clsUsers user)
    		{
        		clsUsers _user = null;
        	if (user.UserName == "admin" && user.Password == "12345")
        	{
            		_user = new clsUsers { UserName = "Azhar Hussain" };
        	}
        	return _user;
    		}

    		private string GenerateToken(clsUsers user)
    		{
        		var securitykey = new SymmetricSecurityKey				(Encoding.UTF8.GetBytes(_config["Jwt:Key"]));

        		var credentials = new SigningCredentials(securitykey, 						SecurityAlgorithms.HmacSha256);

        		var token = new JwtSecurityToken(_config						["Jwt:Issuer"], _config["Jwt:Audience"], null, 				expires: DateTime.Now.AddMinutes(1), 						signingCredentials: credentials);

        	return new JwtSecurityTokenHandler().WriteToken(token);
    		}

    		[AllowAnonymous]
    		[HttpPost]
    		public IActionResult Login(clsUsers user)
    		{
        		IActionResult response = Unauthorized();
        		var user_ = AuthenticateUser(user);
        		if (user_ != null)
        		{
            			var token = GenerateToken(user);
            			response = Ok(new { token = token });
        		}
        		return response;
    		}
	}


8) Add EmployeeController in Controller section

[Route("api/[controller]")]
[ApiController]
public class EmployeeController : ControllerBase
{
    public readonly IConfiguration Configuration;
    public EmployeeController(IConfiguration configuration)
    {
        Configuration = configuration;
    }
    [HttpGet]
    [Route("GetAllEmployees")]
    public string GetEmployees()
    {
        SqlConnection con = new SqlConnection(Configuration.GetConnectionString("EmpployeeAppCon").ToString());
        SqlDataAdapter da = new SqlDataAdapter("select Id,Name,Place,Gender,Salary from Employee", con);
        DataTable dataTable = new DataTable();
        da.Fill(dataTable);
        List<clsEmployee> employees = new List<clsEmployee>();
        clsResponse response = new clsResponse();
        if (dataTable.Rows.Count > 0)
        {
            for (int i = 0; i < dataTable.Rows.Count; i++)
            {
                clsEmployee employee = new clsEmployee();
                employee.Id = Convert.ToInt32(dataTable.Rows[i]["id"]);
                employee.Name = Convert.ToString(dataTable.Rows[i]["Name"]);
                employee.Place = Convert.ToString(dataTable.Rows[i]["Place"]);
                employee.Gender = Convert.ToString(dataTable.Rows[i]["Gender"]);
                employee.Salary = Convert.ToDecimal(dataTable.Rows[i]["Salary"]);
                employees.Add(employee);
            }
        }
        if (employees.Count > 0)
        {
            return JsonConvert.SerializeObject(employees);
        }
        else
        {
            response.StatusCode = 100;
            response.ErrorMessage = "No data found";
            return JsonConvert.SerializeObject(response);
        }
    }

    [Authorize]
    [HttpGet]
    [Route("GetData")]
    public string GetData()
    {
        return "Authenticated with JWT";
    }
    [HttpGet]
    [Route("GetDetails")]
    public string GetDetails()
    {
        return "Authenticate JWT";
    }
    [Authorize]
    [HttpPost]
    [Route("AddUser")]
    public string AddUser(clsUsers user)
    {
      return "Users Added with username:" + user.UserName;
    }
}